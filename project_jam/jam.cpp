int main()
{

	// 주석은 설명 역할

	// 자료형 (크기 단위 ,byte) 1byte = 8bit-> 256가지 경우의 수
	// 정수형 : char(1), short(2), int(4), long(4), long long(8)
	// 실수형 : float(4), double(8)

	// 256 가지 -> 0 ~ 255 ( 1byte = 8bit = 256 )
	unsigned char c = 0;
	c = 0;
	c = 255;

	// 양수만 취급하겠다 -> unsigned char c = 0;
	// 음수, 양수 상관없다 -> char c = 0; ( -128 ~ 0 ~ 127 )
	char c1 = 0;

	// c1 = 255; -> 127까지 표현가능한데, 255를 쓰면?? -1과 똑같음 why?
	// 255은 2진법으로 표현하면 11111110인데 이걸 0으로 만드는 수는 00000001 이고
	// 00000001은 1이기 때문에 255는 -1이 될 수 밖에 없다.

	//음의 정수 찾기
	// 대응되는 양수의 부호를 반전 후, 1을 더한다.

	int a = 4 + 4.0;

	// 정수표현 방식과 실수 표현 방식은 다르다.
	// 실수표현 방식은 정밀도에 의존한다. 따라서 double 자료형이 더 아래의 소수점까지
	// 정확하게 표현이 가능하다.

	// 정수는 정수끼리, 실수는 실수끼리 연산하고, 두 표현방식의 피 연산자가 연산될 경우
	// 명시적으로 변환하자.
	//ex) float f = 10.2415f + (float)20; <- 정수를 실수 타입으로 바꿔줌.

	// 연산자
	// 산술 연산자
	// +, -, *, /, %(모듈러스, 나머지 연산자, 나머지를 구해줌, 피연산자가 모두 정수여야함)
	// ++, -- 한 단계 증가 또는 감소
	int data = 10 + 10;

	//data = data + 20;   둘이 똑같은 말
	//data += 20;	      둘이 똑같은 말 ( 20을 본인 자신에게 넣는다 )

	data = 10 % 3;

	data = 0;
	++data; // 전위 ( 연산 순위 )
	data++; // 후위
	
	int a = 0; 
	//data = a++; ( 연산자 우선순위 가장 마지막 ), data = a; -> a= a+1;
	//data = ++a; ( 연산자 우선순위 가장 먼저 )   a= a+1;-> data = a;                                              )


	//사용자 정의 자료형
	typedef struct _tagMyST
	{
		int a;
		float f;
	}MYST;

	int main()
	{
	
	MYST t; // 구조체의 크기는 4byte + 4byte = 8byte

	return 0;
	}

	//포인터 변수
	// 주소를 저장하는 변수
	// 자료형 + *변수명
	//자료형 : 해당 포인터에게 전달된 주소를 해석하는 단위

	int i = 100;
	int* pInt = &i; // i변수의 위치 주소값을 pInt 변수에 집어넣겠다는 의미
	//****  자료형 : 주소번지에 해당하는 실제 메모리공간을 4byte 정수로 인식하겠다는 의미****
	float f = 3.f;

	// 주소로 접근
	(*pInt) = 100; // i변수에 100을 넣겠다는 의미
	int* pInt = (int*)&f; // 강제로 실수 변수의 위치 주소값을 int형 pInt 변수에 넣는다는 의미
	// 오류가 발생 >> why? pInt 변수는 int로 인식하겠다고 했는데, f는 실수형으로 입력되어 있으므로
	
	

	// 주소의 단위 BYTE
	// 주소가 100 ,101이라면 차이가 1. 1byte 차이가 난다.
	// 왜 pInt에 int,float등의 자료형을 쓸까?? >> 미리 주소 크기를 정해놓으려고
	
	// 포인터 변수의 크기는 8byte 이다. 왜냐하면 64비트 운영체재에서 인식할 수 있는 최대크기이기 때문
	int iSize = sizeof(int*);

	//int 포인터 변수에서의 +1의 의미는 조금 다르다. 가르키고 있는 곳을 int로 보고있기 때문에
	//다음 int 위치로 이동하라느 의미이다. int말고도 다른 자료형에서도 동일
